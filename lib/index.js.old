'use strict';

var flxRepo = {},
    options = {
      allowFlxOverwrite: false
    },
    hooks;

// # Fluxionnal execution model

// ## Fluxions

// The fluxionnal execution model role is to manage and invoke autonomous execution units.
// An execution unit accepts only streams as input and output, that is a continuous and infinite sequence of data contained in messages.
// We named this execution unit a fluxion.

// Messages are composed of the name of the recipient fluxion, a body, and are carried by a messaging system.

/**
 * Build a message
 * @param      {String}   destination name
 * @param      {Object}   body of the message
 * @return     {undefined} nothing
 */
function message(dest, body) {
  return {
    dest: dest,
    body: body
  };
}

// A fluxion is a function, as in functional programming, only dependent from data streams.
// It is composed of a unique name, a processing function, and a persisted memory context.

// While processing a message, the fluxion modifies its context, and sends back messages on its output streams.
// The fluxion's execution context is defined as the set of state variables whose the fluxion depends on, between two rounds of execution.

// The fluxions make up a chain of processing binded by data streams.
// All these chains make up a directed graph, managed by the messaging system.

// ## Messaging system

// The messaging system is the core of our fluxionnal execution model.
// It carries messages along stream, and invokes fluxion at a message reception.

// It is built around a message queue.
// Each message is processed one after another by invocation of the recipient fluxion.
// Using a message queue allows to execute multiple processing chain fairly and concurrently, without difference in scheduling local messages, or network messages.

// The messaging system needs every fluxion to be registered.
// This registration matchs a processing function with a unique name and an initial execution context.
// The messaging system carries messages streams based on the names of the recipients fluxions.
// That's why two fluxions with the same name would lead the system in a conflicting situation.
// The registration is done using the function `register(<name>, <fn>, <context>)`.

/**
 * Register a fluxion
 * @param      {String}   Name
 * @param      {Function} Function
 * @param      {Object}   Scope
 * @return     {undefined} true if successuflly registered, false else.
 */
function register(name, fn, scp) {
  if (flxRepo[name] && !options.allowFlxOverwrite)
    return false;

  if (typeof fn === 'function') {
    scp = scp || {};
    scp.m = message;
    scp.register = register;

    hooks.register(name, fn, scp);
    flxRepo[name] = {run: fn, scp: scp, worker: worker}; 

    return true;
  }

  return false;
}

// To trigger a fluxions chain, a message is sent using `start(<msg>)`, an alias for `post(<msg>)`, with a different meaning.
// This function pushes a first message in the queue.
// Immediately, the system dequeues this message to invoke the recipient processing function.
// The recipient function sends back messages using `post(<msg>)`, to be enqueud in the system.
// The system loops until the queue is empty.

/**
 * Post a message.
 * A message being an object containing the name of the destination fluxion, and the body of the message.
 * @param      {Object}   source path
 * @return     {undefined} nothing
 */

function postMsg(msg) {
  if (!msg)
    return false;

  setImmediate(post, msg);
}

function post(msg) {
  function recvMsg(msg) {
    if (!flxRepo[msg.dest]) {
      throw 'flx ' + msg.dest + ' not defined';
    }

    hooks.post(msg, msg.dest);

    // TODO send a message to the fluxion

    flxRepo[msg.dest].worker.postMessage(msg.body);

    // postMsg(flxRepo[msg.dest].run.call(flxRepo[msg.dest].scp, msg.body));
  }

  // `post` accept messages with only one destination, or an array of destination to send the message to.
  if (msg)
    if (Array.isArray(msg.dest)) {
      msg.dest.forEach(function(dest) {
        recvMsg(message(dest, msg.body));
      })
    } else {
      recvMsg(msg);
    }
}

// # Hooks

try {
  hooks = require('./hooks');
} catch(err) {
  hooks = {
    register: function(name, fn, scps) {
    },
    post: function(msg, dest) {
    }
  };
}

// # Public API

module.exports = {
  register : register,
  post : post,
  start : post,
  m : message,
  options: options
};